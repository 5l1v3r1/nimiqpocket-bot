Logged in as Nimiqpocket-bot <@475824424147484702>
------
Couldn't reach API
Logged in as Nimiqpocket-bot <@475824424147484702>
------
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Logged in as Nimiqpocket-bot <@475824424147484702>
------
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 202, in _request
    yield from resp.start(conn, read_until_eof)
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client_reqrep.py", line 640, in start
    message = yield from httpstream.read()
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/streams.py", line 641, in read
    result = yield from super().read()
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/streams.py", line 476, in read
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
aiohttp.errors.ServerDisconnectedError

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "bot.py", line 163, in <module>
    main()
  File "bot.py", line 160, in main
    client.run(BOT_TOKEN)
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 519, in run
    self.loop.run_until_complete(self.start(*args, **kwargs))
  File "/usr/lib/python3.5/asyncio/base_events.py", line 387, in run_until_complete
    return future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 491, in start
    yield from self.connect()
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 452, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=resume)
  File "/usr/local/lib/python3.5/dist-packages/discord/gateway.py", line 203, in from_client
    gateway = yield from client.http.get_gateway()
  File "/usr/local/lib/python3.5/dist-packages/discord/http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "/usr/local/lib/python3.5/dist-packages/discord/http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 555, in __iter__
    resp = yield from self._coro
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 209, in _request
    raise aiohttp.ClientResponseError() from exc
aiohttp.errors.ClientResponseError
Task was destroyed but it is pending!
task: <Task pending coro=<main.<locals>.background_update() running at bot.py:157> wait_for=<Future pending cb=[Task._wakeup()]>>
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7f43bc81ab00>
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Logged in as Nimiqpocket-bot <@475824424147484702>
------
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 202, in _request
    yield from resp.start(conn, read_until_eof)
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client_reqrep.py", line 640, in start
    message = yield from httpstream.read()
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/streams.py", line 641, in read
    result = yield from super().read()
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/streams.py", line 476, in read
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
aiohttp.errors.ServerDisconnectedError

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "bot.py", line 163, in <module>
    main()
  File "bot.py", line 160, in main
    client.run(BOT_TOKEN)
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 519, in run
    self.loop.run_until_complete(self.start(*args, **kwargs))
  File "/usr/lib/python3.5/asyncio/base_events.py", line 387, in run_until_complete
    return future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 491, in start
    yield from self.connect()
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 452, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=resume)
  File "/usr/local/lib/python3.5/dist-packages/discord/gateway.py", line 203, in from_client
    gateway = yield from client.http.get_gateway()
  File "/usr/local/lib/python3.5/dist-packages/discord/http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "/usr/local/lib/python3.5/dist-packages/discord/http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 555, in __iter__
    resp = yield from self._coro
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 209, in _request
    raise aiohttp.ClientResponseError() from exc
aiohttp.errors.ClientResponseError
Task was destroyed but it is pending!
task: <Task pending coro=<main.<locals>.background_update() running at bot.py:157> wait_for=<Future pending cb=[Task._wakeup()]>>
Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7f35e3022b00>
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Logged in as Nimiqpocket-bot <@475824424147484702>
------
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 202, in _request
    yield from resp.start(conn, read_until_eof)
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client_reqrep.py", line 640, in start
    message = yield from httpstream.read()
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/streams.py", line 641, in read
    result = yield from super().read()
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/streams.py", line 476, in read
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
aiohttp.errors.ServerDisconnectedError

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "bot.py", line 163, in <module>
    main()
  File "bot.py", line 160, in main
    client.run(BOT_TOKEN)
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 519, in run
    self.loop.run_until_complete(self.start(*args, **kwargs))
  File "/usr/lib/python3.5/asyncio/base_events.py", line 387, in run_until_complete
    return future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 491, in start
    yield from self.connect()
  File "/usr/local/lib/python3.5/dist-packages/discord/client.py", line 452, in connect
    self.ws = yield from DiscordWebSocket.from_client(self, resume=resume)
  File "/usr/local/lib/python3.5/dist-packages/discord/gateway.py", line 203, in from_client
    gateway = yield from client.http.get_gateway()
  File "/usr/local/lib/python3.5/dist-packages/discord/http.py", line 633, in get_gateway
    data = yield from self.request(Route('GET', '/gateway'))
  File "/usr/local/lib/python3.5/dist-packages/discord/http.py", line 137, in request
    r = yield from self.session.request(method, url, **kwargs)
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 555, in __iter__
    resp = yield from self._coro
  File "/usr/local/lib/python3.5/dist-packages/aiohttp/client.py", line 209, in _request
    raise aiohttp.ClientResponseError() from exc
aiohttp.errors.ClientResponseError
Task was destroyed but it is pending!
task: <Task pending coro=<main.<locals>.background_update() running at bot.py:157> wait_for=<Future pending cb=[Task._wakeup()]>>
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Unclosed client session
client_session: <aiohttp.client.ClientSession object at 0x7fe42a7a2b00>
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Task exception was never retrieved
future: <Task finished coro=<WebSocketCommonProtocol.run() done, defined at /usr/local/lib/python3.5/dist-packages/websockets/protocol.py:428> exception=ConnectionResetError(104, 'Connection reset by peer')>
Traceback (most recent call last):
  File "/usr/lib/python3.5/asyncio/tasks.py", line 241, in _step
    result = coro.throw(exc)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 434, in run
    msg = yield from self.read_message()
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 456, in read_message
    frame = yield from self.read_data_frame(max_size=self.max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 511, in read_data_frame
    frame = yield from self.read_frame(max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/protocol.py", line 546, in read_frame
    self.reader.readexactly, is_masked, max_size=max_size)
  File "/usr/local/lib/python3.5/dist-packages/websockets/framing.py", line 86, in read_frame
    data = yield from reader(2)
  File "/usr/lib/python3.5/asyncio/streams.py", line 670, in readexactly
    block = yield from self.read(n)
  File "/usr/lib/python3.5/asyncio/streams.py", line 627, in read
    yield from self._wait_for_data('read')
  File "/usr/lib/python3.5/asyncio/streams.py", line 457, in _wait_for_data
    yield from self._waiter
  File "/usr/lib/python3.5/asyncio/futures.py", line 361, in __iter__
    yield self  # This tells Task to wait for completion.
  File "/usr/lib/python3.5/asyncio/tasks.py", line 296, in _wakeup
    future.result()
  File "/usr/lib/python3.5/asyncio/futures.py", line 274, in result
    raise self._exception
  File "/usr/lib/python3.5/asyncio/selector_events.py", line 662, in _read_ready
    data = self._sock.recv(self.max_size)
ConnectionResetError: [Errno 104] Connection reset by peer
Logged in as Nimiqpocket-bot <@475824424147484702>
------
Couldn't connect to Nimiqx API
Couldn't reach API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
Couldn't connect to API
